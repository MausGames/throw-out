

// ****************************************************************
var C_LEVEL_NUM = 12;                                   // number of available levels

var C_LEVEL_X      = 20;                                // X center blocks
var C_LEVEL_Y      = 20;                                // Y
var C_LEVEL_BX     = 16;                                // X border blocks
var C_LEVEL_BY     = 16;                                // Y
var C_LEVEL_CENTER = C_LEVEL_X*C_LEVEL_Y;               // number of blocks in the center
var C_LEVEL_BORDER = C_LEVEL_BX*2 + C_LEVEL_BY*2;       // number of blocks in the border
var C_LEVEL_ALL    = C_LEVEL_CENTER + C_LEVEL_BORDER;   // number of all blocks

var LVL = 0;                                            // helper-variable used below for level defining

// if(!g_iActiveTime) g_iActiveTime = 1;

// ****************************************************************
// arrays with level data (# should be one array, but I still need to check some stuff about prototype-based programming)
var cLevel = {};
cLevel.s_aavColor   = new Array(C_LEVEL_NUM);
cLevel.s_aaiValue   = new Array(C_LEVEL_NUM);
cLevel.s_aaiTyped   = new Array(C_LEVEL_NUM);
cLevel.s_aabPaddle  = new Array(C_LEVEL_NUM);
cLevel.s_avBallDir  = new Array(C_LEVEL_NUM);
cLevel.s_asText     = new Array(C_LEVEL_NUM);
cLevel.s_apFunction = new Array(C_LEVEL_NUM);

// default position for blocks in the center (index 0 is top-left)
cLevel.s_avBlockPos = function()
{
    var avOutput = new Array(C_LEVEL_CENTER);

    for(var i = 0; i < C_LEVEL_Y; ++i)
    {
        for(var j = 0; j < C_LEVEL_X; ++j)
        {
            var iCur = i*C_LEVEL_X + j;
            avOutput[iCur] = vec2.fromValues((j - C_LEVEL_X/2)*3.0+1.5, -((i - C_LEVEL_Y/2)*3.0+1.5));
        }
    }

    return avOutput;
}();

cLevel.s_aiStatus = new Array(10);   // some status attributes for the level-specific functions (are resetet to 0 on level start)


// ****************************************************************
function NextLevel()
{
    // reset total level time
    g_fLevelTime = C_TRANSITION_START - C_TRANSITION_END;

    // increase and check level number
    if(++g_iLevel < C_LEVEL_NUM)
    {
        // start level transition
        g_fTransition = C_TRANSITION_START;
    }
    else
    {
        // finished the game
        ActivateFail();

        if(g_bGameJolt)
        {
            // add platinum trophy
            SendGameJolt("/trophies/add-achieved/"                      +
                         "?username="   + QueryString["gjapi_username"] +
                         "&user_token=" + QueryString["gjapi_token"]    +
                         "&trophy_id="   + 5543, true);
        }
    }
}


// ****************************************************************
function LoadLevel(iLevelNum)
{
    // create center blocks
    for(var i = 0; i < C_LEVEL_Y; ++i)
    {
        for(var j = 0; j < C_LEVEL_X; ++j)
        {
            var iCur = i*C_LEVEL_X + j;

            // create block and set start-position
            g_pBlock[iCur] = new cBlock();
            vec3.set(g_pBlock[iCur].m_vPosition, cLevel.s_avBlockPos[iCur][0], cLevel.s_avBlockPos[iCur][1], 270.0-i*12+j*18);

            if(cLevel.s_aaiValue[iLevelNum][iCur] > 0)
            {
                // set specific color of this block
                vec3.copy(g_pBlock[iCur].m_vColor, cLevel.s_aavColor[iLevelNum][cLevel.s_aaiValue[iLevelNum][iCur]-1]);
                g_pBlock[iCur].m_vColor[3] = 1.0;

                // active block
                g_pBlock[iCur].Activate();
            }
            else g_pBlock[iCur].m_vColor[3] = 0.0;
        }
    }

    // create or regenerate border blocks
    for(var i = 0; i < C_LEVEL_BORDER; ++i)
    {
        var iCur = i + C_LEVEL_CENTER;

        // check if new block has to be created
        if(!g_pBlock[iCur] || !g_pBlock[iCur].m_bActive)
        {
            var iVal = i % C_LEVEL_BX;
            
            // create block
            g_pBlock[iCur] = new cBlock();

            // set start-position
            if(i < 2*C_LEVEL_BY)
            {
                var fSecond = (i < C_LEVEL_BY) ? 1.0 : -1.0;
                vec3.set(g_pBlock[iCur].m_vPosition, ((iVal - C_LEVEL_BY/2)*3.0+1.5) * 1.5*fSecond, -40.0*fSecond, 180.0+i*15);
            }
            else
            {
                var fSecond = (i < 2*C_LEVEL_BY+C_LEVEL_BX) ? 1.0 : -1.0;
                vec3.set(g_pBlock[iCur].m_vPosition, -40.0*fSecond, ((iVal - C_LEVEL_BX/2)*3.0+1.5) * 1.5*fSecond, 180.0+i*15);
            }

            // set color and activate block
            vec4.set(g_pBlock[iCur].m_vColor, 0.2, 0.2, 0.2, 1.0);
            g_pBlock[iCur].Activate();
        }
    }

    // set typed blocks
    if(cLevel.s_aaiTyped[iLevelNum].length)
    {
        // check for special value
        if(cLevel.s_aaiTyped[iLevelNum][0].iAll)
        {
            // all blocks get the specified type
            for(var i = 0; i < C_LEVEL_Y; ++i)
                for(var j = 0; j < C_LEVEL_X; ++j)
                    g_pBlock[i*C_LEVEL_X + j].m_iType = cLevel.s_aaiTyped[iLevelNum][0].iAll;
        }
        else
        {
            // traverse all entries and distribute the types
            for(var i = 0; i < cLevel.s_aaiTyped[iLevelNum].length; ++i)
            {
                var iCur = cLevel.s_aaiTyped[iLevelNum][i].iY*C_LEVEL_X + cLevel.s_aaiTyped[iLevelNum][i].iX;
                g_pBlock[iCur].m_iType = cLevel.s_aaiTyped[iLevelNum][i].iType;
            }
        }
    }

    // set title of the next level (if defined)
    g_pMenuLevel.innerHTML = "<font class='header'>" + cLevel.s_asText[iLevelNum] + "</font>";

    // reset level status attributes
    for(var i = 0; i < cLevel.s_aiStatus.length; ++i)
        cLevel.s_aiStatus[i] = 0;
}


// ****************************************************************
// ### ROUND LOGO ###
LVL = 0;

cLevel.s_aavColor[LVL] =
[vec3.fromValues(140.0/255.0, 159.0/255.0,   8.0/255.0),
 vec3.fromValues(193.0/255.0, 218.0/255.0,  11.0/255.0),
 vec3.fromValues(255.0/255.0, 255.0/255.0, 255.0/255.0)];

cLevel.s_aaiValue[LVL] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 3, 3,  3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 3, 3, 2,  2, 3, 3, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 3, 2, 2,  2, 2, 3, 3, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 2, 2, 1,  1, 2, 2, 3, 0, 0, 0, 0, 0, 0,

 0, 0, 0, 0, 0, 0, 3, 2, 2, 1,  1, 2, 2, 3, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 3, 2, 2,  2, 2, 3, 3, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 3, 3, 2,  2, 3, 3, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 3, 3,  3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[LVL] =
[];

cLevel.s_aabPaddle[LVL] =
[1, 0, 0, 0];

cLevel.s_avBallDir[LVL] =
[-0.707, 0.707],

cLevel.s_asText[LVL] = "";   // should be empty on first level

cLevel.s_apFunction[LVL] = function() {};


// ****************************************************************
// ### BLUE WAVE ###
LVL = 0;

cLevel.s_aavColor[LVL] =
[vec3.fromValues(0.102*0.75, 0.702*0.75, 1.000*0.75),
 vec3.fromValues(0.102*1.00, 0.702*1.00, 1.000*1.00),
 vec3.fromValues(0.102*1.25, 0.702*1.25, 1.000*1.25),
 vec3.fromValues(0.102*1.50, 0.702*1.50, 1.000*1.50)];

cLevel.s_aaiValue[LVL] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,  0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,

 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[LVL] =
[{iX :  8, iY : 2, iType : 1},
 {iX : 11, iY : 2, iType : 1}];

cLevel.s_aabPaddle[LVL] =
[1, 0, 0, 0];

cLevel.s_avBallDir[LVL] =
[0.0, 1.0],

cLevel.s_asText[LVL] = "";

cLevel.s_apFunction[LVL] = function()
{
    if(cLevel.s_aiStatus[0])
    {
        cLevel.s_aiStatus[1] = Math.min(cLevel.s_aiStatus[1]+g_fTime, 1.0);

        for(var i = 0; i < C_LEVEL_CENTER; ++i)
        {
            if(g_pBlock[i].m_bFlying) continue;

            vec2.copy(g_pBlock[i].m_vPosition, cLevel.s_avBlockPos[i]);
            g_pBlock[i].m_vPosition[1] += 5.0*cLevel.s_aiStatus[1]*(0.5 + 0.5*Math.sin(Math.PI*g_fLevelTime + cLevel.s_avBlockPos[i][0]*0.1));

            g_pBlock[i].UpdateTransform();
        }
    }
    else
    {
        for(var i = 0; i < C_LEVEL_CENTER; ++i)
        {
            if(g_pBlock[i].m_bFlying && g_pBlock[i].m_bActive)
            {
                cLevel.s_aiStatus[0] = 1;
                return;
            }
        }
    }
};


// ****************************************************************
// ### SPACE INVADER ###

//cLevel.s_aavColor[1] =
//[vec4.fromValues(255.0/255.0, 255.0/255.0, 255.0/255.0, 1.0),
// vec4.fromValues( 10.0/255.0,  10.0/255.0,  10.0/255.0, 1.0)];
//
//cLevel.s_aaiValue[1] =
//[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
// 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0,
// 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
//
//cLevel.s_aaiTyped[1] =
//[{iNum :  10*C_LEVEL_X+ 5, iType : 1}];
//
//cLevel.s_aabPaddle[1] =
//[1, 1, 0, 0];
//
//cLevel.s_asText[1] = "";
//
//cLevel.s_apFunction[0] = function()
//{
//    if(!g_iActiveTime) g_iActiveTime = 1;
//    for(var i = 0; i < C_LEVEL_CENTER; ++i)
//    {
//        if(g_pBlock[i].m_bFlying) continue;
//
//        vec2.copy(g_pBlock[i].m_vPosition, cLevel.s_avBlockPos[i]);
//        g_pBlock[i].m_vPosition[0] *= 1.0 + 0.5*(0.5 + 0.5*Math.sin(Math.PI*(g_fLevelTime+0.75)));
//        g_pBlock[i].m_vPosition[1] *= 1.0 + 0.5*(0.5 + 0.5*Math.sin(Math.PI*(g_fLevelTime+0.75)));
//
//        g_pBlock[i].UpdateTransform();
//    }
//};



/*

// ****************************************************************
// ### MEGA MAN ###

cLevel.s_aavColor[2] =
[vec4.fromValues( 10.0/255.0,  10.0/255.0,  10.0/255.0, 1.0),
 vec4.fromValues(153.0/255.0, 217.0/255.0, 234.0/255.0, 1.0),
 vec4.fromValues( 77.0/255.0, 109.0/255.0, 243.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0, 192.0/255.0, 128.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0, 255.0/255.0, 255.0/255.0, 1.0)];

cLevel.s_aaiValue[2] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 1, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 3, 3, 3, 1, 2, 2, 1, 0, 0, 0, 0,
 0, 0, 0, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0,
 0, 0, 0, 1, 3, 3, 3, 3, 3, 1, 2, 2, 3, 1, 0, 0,
 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 0, 0,
 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 3, 3, 5, 1, 0, 0,
 0, 0, 1, 2, 3, 4, 5, 5, 1, 1, 4, 1, 5, 1, 0, 0,
 0, 0, 0, 1, 3, 4, 5, 5, 1, 1, 4, 1, 5, 1, 0, 0,
 0, 0, 0, 1, 3, 4, 4, 5, 5, 5, 4, 5, 4, 1, 0, 0,
 0, 0, 0, 0, 1, 3, 4, 1, 1, 1, 1, 4, 1, 0, 0, 0,
 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 4, 1, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[2] =
[{iNum :  5*C_LEVEL_X+ 6, iType : 1}];

cLevel.s_aabPaddle[2] =
[1, 0, 0, 0];

cLevel.s_asText[2] = "";


// ****************************************************************
// ### LINK ###

cLevel.s_aavColor[3] =
[vec4.fromValues(203.0/255.0, 214.0/255.0,   0.0/255.0, 1.0),
 vec4.fromValues(180.0/255.0,  87.0/255.0,   7.0/255.0, 1.0),
 vec4.fromValues(251.0/255.0, 167.0/255.0,  17.0/255.0, 1.0)];

cLevel.s_aaiValue[3] =
[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
 0, 0, 3, 0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 3, 0, 0,
 0, 0, 3, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 0, 0,
 0, 0, 3, 3, 2, 3, 1, 3, 3, 1, 3, 2, 3, 3, 0, 0,
 0, 0, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3, 3, 0, 0,
 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0,
 0, 0, 0, 0, 1, 3, 3, 2, 2, 3, 3, 1, 2, 2, 0, 0,
 0, 0, 2, 2, 2, 2, 2, 3, 3, 3, 1, 1, 1, 3, 0, 0,
 0, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 0, 0,
 0, 2, 3, 3, 3, 2, 2, 3, 2, 2, 1, 1, 2, 0, 0, 0,
 0, 2, 2, 3, 2, 2, 2, 3, 1, 2, 2, 2, 1, 0, 0, 0,
 0, 2, 2, 3, 2, 2, 2, 3, 2, 2, 1, 1, 1, 0, 0, 0,
 0, 2, 2, 2, 2, 2, 2, 3, 1, 1, 1, 2, 0, 0, 0, 0,
 0, 0, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0];

cLevel.s_aaiTyped[3] =
[{iNum :  5*C_LEVEL_X+ 6, iType : 1},
 {iNum :  5*C_LEVEL_X+ 9, iType : 1},
 {iNum : 10*C_LEVEL_X+ 3, iType : 2}];

 cLevel.s_aabPaddle[3] =
[1, 0, 0, 0];

cLevel.s_asText[3] = "";


// ****************************************************************
// ### FEZ ###

cLevel.s_aavColor[4] =
[vec4.fromValues(254.0/255.0, 201.0/255.0,  38.0/255.0, 1.0),
 vec4.fromValues(188.0/255.0,   0.0/255.0,   0.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0,   0.0/255.0,   0.0/255.0, 1.0),
 vec4.fromValues(158.0/255.0, 167.0/255.0, 155.0/255.0, 1.0),
 vec4.fromValues(209.0/255.0, 212.0/255.0, 208.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0, 255.0/255.0, 255.0/255.0, 1.0),
 vec4.fromValues( 10.0/255.0,  10.0/255.0,  10.0/255.0, 1.0)];

cLevel.s_aaiValue[4] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0,
 0, 0, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
 0, 0, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
 0, 0, 4, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 0, 0,
 0, 0, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0,
 0, 0, 4, 5, 5, 6, 6, 6, 7, 7, 6, 6, 6, 6, 0, 0,
 0, 0, 0, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[4] =
[{iNum :  4*C_LEVEL_X+ 6, iType : 2}];

cLevel.s_aabPaddle[4] =
[1, 0, 0, 0];

cLevel.s_asText[4] = "";


// ****************************************************************
// ### PACMAN GHOST ###

cLevel.s_aavColor[5] =
[vec4.fromValues(237.0/255.0,  27.0/255.0,  36.0/255.0, 1.0),
 vec4.fromValues(  0.0/255.0, 113.0/255.0, 189.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0, 255.0/255.0, 255.0/255.0, 1.0)];

cLevel.s_aaiValue[5] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
 0, 0, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 0, 0,
 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 0, 0,
 0, 0, 1, 1, 3, 3, 2, 2, 1, 1, 3, 3, 2, 2, 0, 0,
 0, 1, 1, 1, 3, 3, 2, 2, 1, 1, 3, 3, 2, 2, 1, 0,
 0, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 0,
 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0,
 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[5] =
[{iNum :  1*C_LEVEL_X+ 6, iType : 1},
 {iNum :  1*C_LEVEL_X+ 9, iType : 1},
 {iNum : 11*C_LEVEL_X+ 3, iType : 2}];

cLevel.s_aabPaddle[5] =
[1, 0, 0, 0];

cLevel.s_asText[5] = "";


// ****************************************************************
// ### PIKACHU ###

cLevel.s_aavColor[6] =
[vec4.fromValues(255.0/255.0, 235.0/255.0,   1.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0,   0.0/255.0,   0.0/255.0, 1.0),
 vec4.fromValues(128.0/255.0,  64.0/255.0,   0.0/255.0, 1.0),
 vec4.fromValues( 10.0/255.0,  10.0/255.0,  10.0/255.0, 1.0)];

cLevel.s_aaiValue[6] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4,
 0, 0, 0, 0, 4, 4, 4, 1, 1, 4, 4, 4, 1, 1, 1, 4,
 0, 0, 0, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 4, 0,
 0, 0, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 4, 0, 0,
 0, 0, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 0, 0, 0,
 0, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 4, 4, 4, 0,
 0, 4, 1, 1, 1, 1, 2, 1, 1, 1, 4, 4, 1, 1, 4, 0,
 0, 0, 4, 1, 1, 1, 1, 1, 3, 3, 3, 4, 3, 4, 0, 0,
 0, 0, 4, 1, 4, 1, 1, 1, 1, 1, 1, 4, 3, 3, 4, 0,
 0, 0, 4, 1, 4, 4, 1, 1, 3, 3, 3, 4, 3, 4, 0, 0,
 0, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 0, 0, 0,
 0, 0, 0, 4, 4, 1, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[6] =
[{iNum :  5*C_LEVEL_X+ 3, iType : 1},
 {iNum :  3*C_LEVEL_X+14, iType : 1},
 {iNum : 12*C_LEVEL_X+ 9, iType : 1},
 {iNum :  8*C_LEVEL_X+ 6, iType : 2}];

cLevel.s_aabPaddle[6] =
[1, 0, 0, 0];

cLevel.s_asText[6] = "";


// ****************************************************************
// ### CREEPER ###

cLevel.s_aavColor[7] =
[vec4.fromValues(200.0/255.0, 227.0/255.0, 194.0/255.0, 1.0),
 vec4.fromValues( 99.0/255.0, 199.0/255.0,  83.0/255.0, 1.0),
 vec4.fromValues( 40.0/255.0, 142.0/255.0,  32.0/255.0, 1.0),
 vec4.fromValues( 10.0/255.0,  10.0/255.0,  10.0/255.0, 1.0)];

cLevel.s_aaiValue[7] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 3, 1, 3, 2, 2, 1, 2, 2, 3, 1, 0, 0, 0,
 0, 0, 0, 1, 3, 2, 2, 2, 3, 2, 2, 1, 3, 0, 0, 0,
 0, 0, 0, 1, 2, 4, 4, 2, 3, 4, 4, 1, 2, 0, 0, 0,
 0, 0, 0, 2, 2, 4, 4, 2, 2, 4, 4, 2, 2, 0, 0, 0,
 0, 0, 0, 2, 2, 2, 2, 4, 4, 1, 3, 2, 2, 0, 0, 0,
 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 2, 1, 2, 0, 0, 0,
 0, 0, 0, 3, 1, 3, 4, 4, 4, 4, 2, 3, 1, 0, 0, 0,
 0, 0, 0, 2, 2, 2, 4, 2, 1, 4, 3, 2, 2, 0, 0, 0,
 0, 0, 0, 3, 1, 3, 2, 2, 1, 2, 2, 3, 1, 0, 0, 0,
 0, 0, 0, 1, 3, 2, 2, 2, 3, 2, 2, 1, 3, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[7] =
[{iNum :  5*C_LEVEL_X+ 5, iType : 1},
 {iNum :  5*C_LEVEL_X+10, iType : 1},
 {iNum : 10*C_LEVEL_X+ 6, iType : 1},
 {iNum : 10*C_LEVEL_X+ 9, iType : 1},
 {iNum : 12*C_LEVEL_X+12, iType : 2}];

cLevel.s_aabPaddle[7] =
[1, 0, 0, 0];

cLevel.s_asText[7] = "";


// ****************************************************************
// ### FINAL FANTASY ###

cLevel.s_aavColor[8] =
[vec4.fromValues( 19.0/255.0, 191.0/255.0, 227.0/255.0, 1.0),
 vec4.fromValues(247.0/255.0, 194.0/255.0,  23.0/255.0, 1.0),
 vec4.fromValues( 10.0/255.0,  10.0/255.0,  10.0/255.0, 1.0)];

cLevel.s_aaiValue[8] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0,
 3, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 3, 3, 0,
 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
 3, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
 0, 3, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
 0, 3, 1, 3, 2, 2, 2, 3, 1, 1, 2, 2, 1, 1, 1, 3,
 0, 3, 3, 3, 3, 3, 3, 2, 1, 2, 2, 2, 1, 1, 1, 3,
 0, 0, 0, 3, 2, 3, 2, 2, 1, 2, 2, 2, 1, 1, 3, 3,
 0, 0, 0, 3, 2, 3, 2, 2, 1, 2, 2, 1, 1, 3, 3, 0,
 0, 0, 0, 3, 2, 2, 2, 2, 2, 1, 1, 3, 3, 0, 0, 0,
 0, 0, 0, 3, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 3, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[8] =
[{iNum :  6*C_LEVEL_X+ 7, iType : 1},
 {iNum :  6*C_LEVEL_X+10, iType : 1},
 {iNum :  6*C_LEVEL_X+13, iType : 1},
 {iNum :  3*C_LEVEL_X+ 4, iType : 2}];

cLevel.s_aabPaddle[8] =
[1, 0, 0, 0];

cLevel.s_asText[8] = "";


// ****************************************************************
// ### BUBBLE BOBBLE ###

cLevel.s_aavColor[9] =
[vec4.fromValues( 76.0/255.0, 220.0/255.0,  72.0/255.0, 1.0),
 vec4.fromValues(252.0/255.0, 116.0/255.0,  96.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0, 255.0/255.0, 255.0/255.0, 1.0),
 vec4.fromValues( 10.0/255.0,  10.0/255.0,  10.0/255.0, 1.0)];

cLevel.s_aaiValue[9] =
[0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0,
 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 1, 3, 1, 0, 0,
 0, 0, 2, 2, 2, 1, 1, 1, 3, 3, 4, 1, 4, 3, 0, 0,
 0, 0, 0, 2, 1, 1, 1, 1, 3, 3, 4, 1, 4, 3, 0, 0,
 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 4, 1, 4, 3, 1, 0,
 0, 0, 2, 2, 1, 1, 1, 1, 3, 3, 4, 1, 4, 3, 1, 0,
 0, 0, 0, 2, 1, 1, 1, 1, 1, 3, 3, 1, 3, 1, 1, 0,
 0, 0, 0, 0, 1, 2, 1, 1, 4, 4, 4, 3, 4, 4, 0, 0,
 0, 0, 0, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0,
 1, 0, 0, 1, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 0, 0,
 1, 2, 2, 1, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0,
 0, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 0, 0,
 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2];

cLevel.s_aaiTyped[9] =
[{iNum :  0*C_LEVEL_X+ 8, iType : 1},
 {iNum :  2*C_LEVEL_X+ 3, iType : 1},
 {iNum :  5*C_LEVEL_X+ 2, iType : 1},
 {iNum :  8*C_LEVEL_X+ 2, iType : 1},
 {iNum : 12*C_LEVEL_X+ 6, iType : 1},
 {iNum : 13*C_LEVEL_X+ 5, iType : 1},
 {iNum : 15*C_LEVEL_X+15, iType : 2}];

cLevel.s_aabPaddle[9] =
[1, 0, 0, 0];

cLevel.s_asText[9] = "";


// ****************************************************************
// ### MARIO ###

cLevel.s_aavColor[10] =
[vec4.fromValues(216.0/255.0,   6.0/255.0,   6.0/255.0, 1.0),
 vec4.fromValues(110.0/255.0, 102.0/255.0,   0.0/255.0, 1.0),
 vec4.fromValues(247.0/255.0, 170.0/255.0,   0.0/255.0, 1.0)];

cLevel.s_aaiValue[10] =
[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
 0, 0, 0, 0, 2, 2, 2, 3, 3, 2, 3, 0, 0, 0, 0, 0,
 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 0, 0, 0,
 0, 0, 0, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 0, 0,
 0, 0, 0, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 0, 0, 0,
 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0,
 0, 0, 0, 0, 2, 2, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0,
 0, 0, 0, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 0,
 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0,
 0, 0, 3, 3, 2, 1, 3, 1, 1, 3, 1, 2, 3, 3, 0, 0,
 0, 0, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0,
 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0,
 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,
 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0,
 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0];

cLevel.s_aaiTyped[10] =
[{iNum :  0*C_LEVEL_X+ 5, iType : 1},
 {iNum :  0*C_LEVEL_X+ 9, iType : 1},
 {iNum : 10*C_LEVEL_X+ 6, iType : 1},
 {iNum : 10*C_LEVEL_X+ 9, iType : 1},
 {iNum : 12*C_LEVEL_X+ 2, iType : 1},
 {iNum : 12*C_LEVEL_X+13, iType : 1},
 {iNum : 15*C_LEVEL_X+ 2, iType : 1},
 {iNum : 15*C_LEVEL_X+13, iType : 1},
 {iNum :  4*C_LEVEL_X+13, iType : 2}];

cLevel.s_aabPaddle[10] =
[1, 0, 0, 0];

cLevel.s_asText[10] = "";

*/


// ****************************************************************
// ### GAME JOLT ###
LVL = 11;

cLevel.s_aavColor[LVL] =
[vec4.fromValues( 47.0/255.0, 127.0/255.0, 111.0/255.0, 1.0),
 vec4.fromValues(204.0/255.0, 255.0/255.0,   0.0/255.0, 1.0),
 vec4.fromValues(255.0/255.0, 255.0/255.0, 255.0/255.0, 1.0)];

cLevel.s_aaiValue[LVL] =
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0,
 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 3, 3, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0,
 0, 0, 0, 3, 3, 1, 2, 1, 2, 1, 2, 3, 3, 3, 3, 3, 0, 0, 0, 0,
 0, 0, 0, 3, 3, 2, 1, 2, 1, 2, 1, 2, 1, 3, 3, 0, 0, 0, 0, 0,
 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0,
 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

cLevel.s_aaiTyped[LVL] =
[{iAll : 1}];

cLevel.s_aabPaddle[LVL] =
[1, 0, 0, 0];

cLevel.s_asText[LVL] = "Bonus Level";

cLevel.s_apFunction[LVL] = function() {};