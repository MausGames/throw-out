

// ****************************************************************
cBlock.s_afVertexData =
[-0.587036, -0.587036, -0.391357, -0.524369, -0.524369, -0.670858,
-0.587036, 0.587036, -0.391357,   -0.524369, 0.524369, -0.670858, 
0.587036, 0.587036, -0.391357,    0.524369, 0.524369, -0.670858, 
0.587036, -0.587036, -0.391357,   0.524369, -0.524369, -0.670858, 
-0.587036, -0.587036, 0.391357,   -0.524369, -0.524369, 0.670858, 
-0.587036, 0.587036, 0.391357,    -0.524369, 0.524369, 0.670858, 
0.587036, 0.587036, 0.391357,     0.524369, 0.524369, 0.670858, 
0.587036, -0.587036, 0.391357,    0.524369, -0.524369, 0.670858, 
-0.617343, -0.414038, 0.411562,   -0.598956, -0.121036, 0.791528, 
-0.626202, -0.145471, 0.417468,   -0.594012, -0.018525, 0.804224, 
-0.626202, 0.145471, 0.417468,    -0.594012, 0.018525, 0.804224, 
-0.617343, 0.414038, 0.411562,    -0.598956, 0.121036, 0.791528, 
-0.617343, 0.617343, 0.276025,    -0.690909, 0.690909, 0.212683, 
-0.626202, 0.626202, 0.096981,    -0.706656, 0.706656, 0.034577, 
-0.626202, 0.626202, -0.096981,   -0.706656, 0.706656, -0.034577, 
-0.617343, 0.617343, -0.276025,   -0.690909, 0.690909, -0.212683, 
-0.617343, 0.414038, -0.411562,   -0.598956, 0.121036, -0.791528, 
-0.626202, 0.145471, -0.417468,   -0.594012, 0.018525, -0.804224, 
-0.626202, -0.145471, -0.417468,  -0.594012, -0.018525, -0.804224,
-0.617343, -0.414038, -0.411562,  -0.598956, -0.121036, -0.791528,
-0.617343, -0.617343, -0.276025,  -0.690909, -0.690909, -0.212683,
-0.626202, -0.626202, -0.096981,  -0.706656, -0.706656, -0.034577,
-0.626202, -0.626202, 0.096981,   -0.706656, -0.706656, 0.034577, 
-0.617343, -0.617343, 0.276025,   -0.690909, -0.690909, 0.212683, 
-0.414038, 0.617343, 0.411562,    -0.121036, 0.598956, 0.791528, 
-0.145471, 0.626202, 0.417468,    -0.018525, 0.594012, 0.804224, 
0.145471, 0.626202, 0.417468,     0.018525, 0.594012, 0.804224, 
0.414038, 0.617343, 0.411562,     0.121036, 0.598956, 0.791528, 
0.617343, 0.617343, 0.276025,     0.690909, 0.690909, 0.212683, 
0.626202, 0.626202, 0.096981,     0.706656, 0.706656, 0.034577, 
0.626202, 0.626202, -0.096981,    0.706656, 0.706656, -0.034577, 
0.617343, 0.617343, -0.276025,    0.690909, 0.690909, -0.212683, 
0.414038, 0.617343, -0.411562,    0.121036, 0.598956, -0.791528, 
0.145471, 0.626202, -0.417468,    0.018525, 0.594012, -0.804224, 
-0.145471, 0.626202, -0.417468,   -0.018525, 0.594012, -0.804224, 
-0.414038, 0.617343, -0.411562,   -0.121036, 0.598956, -0.791528, 
0.617343, 0.414038, 0.411562,     0.598956, 0.121036, 0.791528, 
0.626202, 0.145471, 0.417468,     0.594012, 0.018525, 0.804224, 
0.626202, -0.145471, 0.417468,    0.594012, -0.018525, 0.804224, 
0.617343, -0.414038, 0.411562,    0.598956, -0.121036, 0.791528, 
0.617343, -0.617343, 0.276025,    0.690909, -0.690909, 0.212683, 
0.626202, -0.626202, 0.096981,    0.706656, -0.706656, 0.034577, 
0.626202, -0.626202, -0.096981,   0.706656, -0.706656, -0.034577, 
0.617343, -0.617343, -0.276025,   0.690909, -0.690909, -0.212683, 
0.617343, -0.414038, -0.411562,   0.598956, -0.121036, -0.791528, 
0.626202, -0.145471, -0.417468,   0.594012, -0.018525, -0.804224, 
0.626202, 0.145471, -0.417468,    0.594012, 0.018525, -0.804224, 
0.617343, 0.414038, -0.411562,    0.598956, 0.121036, -0.791528, 
0.414038, -0.617343, 0.411562,    0.121036, -0.598956, 0.791528, 
0.145471, -0.626202, 0.417468,    0.018525, -0.594012, 0.804224, 
-0.145471, -0.626202, 0.417468,   -0.018525, -0.594012, 0.804224, 
-0.414038, -0.617343, 0.411562,   -0.121036, -0.598956, 0.791528, 
-0.414038, -0.617343, -0.411562,  -0.121036, -0.598956, -0.791528,
-0.145471, -0.626202, -0.417468,  -0.018525, -0.594012, -0.804224,
0.145471, -0.626202, -0.417468,   0.018525, -0.594012, -0.804224, 
0.414038, -0.617343, -0.411562,   0.121036, -0.598956, -0.791528, 
-0.697504, -0.419412, 0.279608,   -0.932707, -0.200110, 0.299997, 
-0.717899, -0.421313, 0.097426,   -0.968505, -0.243416, 0.052126, 
-0.717899, -0.421313, -0.097426,  -0.968505, -0.243416, -0.052126,
-0.697504, -0.419412, -0.279608,  -0.932707, -0.200110, -0.299997,
-0.717899, -0.146140, 0.280876,   -0.937651, -0.033265, 0.345927, 
-0.741614, -0.146356, 0.097571,   -0.997009, -0.042848, 0.064150, 
-0.741614, -0.146356, -0.097571,  -0.997009, -0.042848, -0.064150,
-0.717899, -0.146140, -0.280876,  -0.937651, -0.033265, -0.345927,
-0.717899, 0.146140, 0.280876,    -0.937651, 0.033265, 0.345927, 
-0.741614, 0.146356, 0.097571,    -0.997009, 0.042848, 0.064150, 
-0.741614, 0.146356, -0.097571,   -0.997009, 0.042848, -0.064150, 
-0.717899, 0.146140, -0.280876,   -0.937651, 0.033265, -0.345927, 
-0.697504, 0.419412, 0.279608,    -0.932707, 0.200110, 0.299997, 
-0.717899, 0.421313, 0.097426,    -0.968505, 0.243416, 0.052126, 
-0.717899, 0.421313, -0.097426,   -0.968505, 0.243416, -0.052126, 
-0.697504, 0.419412, -0.279608,   -0.932707, 0.200110, -0.299997, 
-0.419412, 0.697504, 0.279608,    -0.200110, 0.932707, 0.299997, 
-0.421313, 0.717899, 0.097426,    -0.243416, 0.968505, 0.052126, 
-0.421313, 0.717899, -0.097426,   -0.243416, 0.968505, -0.052126, 
-0.419412, 0.697504, -0.279608,   -0.200110, 0.932707, -0.299997, 
-0.146140, 0.717899, 0.280876,    -0.033265, 0.937651, 0.345927, 
-0.146356, 0.741614, 0.097571,    -0.042848, 0.997009, 0.064150, 
-0.146356, 0.741614, -0.097571,   -0.042848, 0.997009, -0.064150, 
-0.146140, 0.717899, -0.280876,   -0.033265, 0.937651, -0.345927, 
0.146140, 0.717899, 0.280876,     0.033265, 0.937651, 0.345927, 
0.146356, 0.741614, 0.097571,     0.042848, 0.997009, 0.064150, 
0.146356, 0.741614, -0.097571,    0.042848, 0.997009, -0.064150, 
0.146140, 0.717899, -0.280876,    0.033265, 0.937651, -0.345927, 
0.419412, 0.697504, 0.279608,     0.200110, 0.932707, 0.299997, 
0.421313, 0.717899, 0.097426,     0.243416, 0.968505, 0.052126, 
0.421313, 0.717899, -0.097426,    0.243416, 0.968505, -0.052126, 
0.419412, 0.697504, -0.279608,    0.200110, 0.932707, -0.299997, 
0.697504, 0.419412, 0.279608,     0.932707, 0.200110, 0.299997, 
0.717899, 0.421313, 0.097426,     0.968505, 0.243416, 0.052126, 
0.717899, 0.421313, -0.097426,    0.968505, 0.243416, -0.052126, 
0.697504, 0.419412, -0.279608,    0.932707, 0.200110, -0.299997, 
0.717899, 0.146140, 0.280876,     0.937651, 0.033265, 0.345927, 
0.741614, 0.146356, 0.097571,     0.997009, 0.042848, 0.064150, 
0.741614, 0.146356, -0.097571,    0.997009, 0.042848, -0.064150, 
0.717899, 0.146140, -0.280876,    0.937651, 0.033265, -0.345927, 
0.717899, -0.146140, 0.280876,    0.937651, -0.033265, 0.345927, 
0.741614, -0.146356, 0.097571,    0.997009, -0.042848, 0.064150, 
0.741614, -0.146356, -0.097571,   0.997009, -0.042848, -0.064150, 
0.717899, -0.146140, -0.280876,   0.937651, -0.033265, -0.345927, 
0.697504, -0.419412, 0.279608,    0.932707, -0.200110, 0.299997, 
0.717899, -0.421313, 0.097426,    0.968505, -0.243416, 0.052126, 
0.717899, -0.421313, -0.097426,   0.968505, -0.243416, -0.052126, 
0.697504, -0.419412, -0.279608,   0.932707, -0.200110, -0.299997, 
0.419412, -0.697504, 0.279608,    0.200110, -0.932707, 0.299997, 
0.421313, -0.717899, 0.097426,    0.243416, -0.968505, 0.052126, 
0.421313, -0.717899, -0.097426,   0.243416, -0.968505, -0.052126, 
0.419412, -0.697504, -0.279608,   0.200110, -0.932707, -0.299997, 
0.146140, -0.717899, 0.280876,    0.033265, -0.937651, 0.345927, 
0.146356, -0.741614, 0.097571,    0.042848, -0.997009, 0.064150, 
0.146356, -0.741614, -0.097571,   0.042848, -0.997009, -0.064150, 
0.146140, -0.717899, -0.280876,   0.033265, -0.937651, -0.345927, 
-0.146140, -0.717899, 0.280876,   -0.033265, -0.937651, 0.345927, 
-0.146356, -0.741614, 0.097571,   -0.042848, -0.997009, 0.064150, 
-0.146356, -0.741614, -0.097571,  -0.042848, -0.997009, -0.064150,
-0.146140, -0.717899, -0.280876,  -0.033265, -0.937651, -0.345927,
-0.419412, -0.697504, 0.279608,   -0.200110, -0.932707, 0.299997, 
-0.421313, -0.717899, 0.097426,   -0.243416, -0.968505, 0.052126, 
-0.421313, -0.717899, -0.097426,  -0.243416, -0.968505, -0.052126,
-0.419412, -0.697504, -0.279608,  -0.200110, -0.932707, -0.299997,
-0.419412, -0.419412, -0.465002,  -0.144566, -0.144566, -0.978851,
-0.146140, -0.421313, -0.478599,  -0.022248, -0.170202, -0.985137,
0.146140, -0.421313, -0.478599,   0.022248, -0.170202, -0.985137, 
0.419412, -0.419412, -0.465002,   0.144566, -0.144566, -0.978851, 
-0.421313, -0.146140, -0.478599,  -0.170202, -0.022248, -0.985137,
-0.146356, -0.146356, -0.494409,  -0.027772, -0.027772, -0.999207,
0.146356, -0.146356, -0.494409,   0.027772, -0.027772, -0.999207, 
0.421313, -0.146140, -0.478599,   0.170202, -0.022248, -0.985137, 
-0.421313, 0.146140, -0.478599,   -0.170202, 0.022248, -0.985137, 
-0.146356, 0.146356, -0.494409,   -0.027772, 0.027772, -0.999207, 
0.146356, 0.146356, -0.494409,    0.027772, 0.027772, -0.999207, 
0.421313, 0.146140, -0.478599,    0.170202, 0.022248, -0.985137, 
-0.419412, 0.419412, -0.465002,   -0.144566, 0.144566, -0.978851, 
-0.146140, 0.421313, -0.478599,   -0.022248, 0.170202, -0.985137, 
0.146140, 0.421313, -0.478599,    0.022248, 0.170202, -0.985137, 
0.419412, 0.419412, -0.465002,    0.144566, 0.144566, -0.978851, 
0.419412, -0.419412, 0.465002,    0.144566, -0.144566, 0.978851, 
0.146140, -0.421313, 0.478599,    0.022248, -0.170202, 0.985137, 
-0.146140, -0.421313, 0.478599,   -0.022248, -0.170202, 0.985137, 
-0.419412, -0.419412, 0.465002,   -0.144566, -0.144566, 0.978851, 
0.421313, -0.146140, 0.478599,    0.170202, -0.022248, 0.985137, 
0.146356, -0.146356, 0.494409,    0.027772, -0.027772, 0.999207, 
-0.146356, -0.146356, 0.494409,   -0.027772, -0.027772, 0.999207, 
-0.421313, -0.146140, 0.478599,   -0.170202, -0.022248, 0.985137, 
0.421313, 0.146140, 0.478599,     0.170202, 0.022248, 0.985137, 
0.146356, 0.146356, 0.494409,     0.027772, 0.027772, 0.999207, 
-0.146356, 0.146356, 0.494409,    -0.027772, 0.027772, 0.999207, 
-0.421313, 0.146140, 0.478599,    -0.170202, 0.022248, 0.985137, 
0.419412, 0.419412, 0.465002,     0.144566, 0.144566, 0.978851, 
0.146140, 0.421313, 0.478599,     0.022248, 0.170202, 0.985137, 
-0.146140, 0.421313, 0.478599,    -0.022248, 0.170202, 0.985137, 
-0.419412, 0.419412, 0.465002,    -0.144566, 0.144566, 0.978851];
             
cBlock.s_aiIndexData =
[71, 15, 1, 87, 31, 2, 103, 43, 3, 20, 0, 119, 135, 32, 2, 151, 24, 5, 59, 0, 20, 59, 63, 19, 63, 67, 17, 67, 71, 16, 4, 8, 56, 23, 56, 57, 22, 57, 58, 21, 58, 20, 8, 9, 60, 56, 60, 57, 57, 61, 62, 58, 62, 63, 9, 10, 64, 60, 64, 65, 61, 65, 66, 62, 66, 67, 10, 11, 64, 64, 68, 69, 65, 69, 70, 66, 70, 67, 11, 5, 68, 68, 12, 69, 69, 13, 14, 70, 14, 15, 15, 75, 1, 75, 79, 35, 79, 83, 33, 83, 87, 32, 5, 24, 72, 12, 72, 73, 13, 73, 74, 14, 74, 15, 24, 25, 76, 72, 76, 73, 73, 77, 78, 74, 78, 79, 25, 26, 80, 76, 80, 81, 77, 81, 82, 78, 82, 79, 26, 27, 80, 80, 84, 85, 81, 85, 86, 82, 86, 83, 27, 6, 84, 84, 28, 85, 85, 29, 30, 86, 30, 31, 31, 91, 2, 91, 95, 47, 95, 99, 46, 99, 103, 44, 6, 36, 88, 28, 88, 89, 29, 89, 90, 30, 90, 31, 36, 37, 92, 88, 92, 89, 89, 93, 94, 90, 94, 95, 37, 38, 96, 92, 96, 97, 93, 97, 98, 94, 98, 95, 38, 39, 96, 96, 100, 101, 97, 101, 102, 98, 102, 99, 39, 7, 100, 100, 40, 101, 101, 41, 42, 102, 42, 43, 43, 107, 3, 107, 111, 55, 111, 115, 53, 115, 119, 52, 7, 48, 104, 40, 104, 105, 41, 105, 106, 42, 106, 43, 48, 49, 108, 104, 108, 105, 105, 109, 110, 106, 110, 111, 49, 50, 112, 108, 112, 113, 109, 113, 114, 110, 114, 115, 50, 51, 112, 112, 116, 117, 113, 117, 118, 114, 118, 115, 51, 4, 116, 116, 23, 117, 117, 22, 21, 118, 21, 20, 55, 123, 3, 123, 127, 44, 127, 131, 45, 131, 135, 47, 0, 19, 120, 52, 120, 121, 53, 121, 122, 54, 122, 55, 19, 18, 124, 120, 124, 125, 121, 125, 126, 122, 126, 123, 18, 17, 128, 124, 128, 125, 125, 129, 130, 126, 130, 131, 17, 16, 128, 128, 132, 129, 129, 133, 134, 130, 134, 135, 16, 1, 132, 132, 35, 133, 133, 34, 134, 134, 33, 32, 51, 139, 4, 139, 143, 8, 143, 147, 9, 147, 151, 11, 7, 39, 136, 48, 136, 137, 49, 137, 138, 50, 138, 51, 39, 38, 140, 136, 140, 141, 137, 141, 142, 138, 142, 139, 38, 37, 144, 140, 144, 141, 141, 145, 146, 142, 146, 147, 37, 36, 144, 144, 148, 145, 145, 149, 150, 146, 150, 151, 36, 6, 148, 148, 27, 149, 149, 26, 25, 150, 25, 24, 16, 71, 1, 32, 87, 2, 44, 103, 3, 119, 0, 52, 47, 135, 2, 11, 151, 5, 19, 0, 59, 63, 18, 19, 18, 63, 17, 17, 67, 16, 23, 4, 56, 22, 23, 57, 21, 22, 58, 58, 59, 20, 56, 8, 60, 60, 61, 57, 58, 57, 62, 59, 58, 63, 60, 9, 64, 61, 60, 65, 62, 61, 66, 63, 62, 67, 11, 68, 64, 65, 64, 69, 66, 65, 70, 70, 71, 67, 5, 12, 68, 12, 13, 69, 70, 69, 14, 71, 70, 15, 75, 35, 1, 79, 34, 35, 34, 79, 33, 33, 83, 32, 12, 5, 72, 13, 12, 73, 14, 13, 74, 74, 75, 15, 72, 24, 76, 76, 77, 73, 74, 73, 78, 75, 74, 79, 76, 25, 80, 77, 76, 81, 78, 77, 82, 98, 99, 95, 27, 84, 80, 81, 80, 85, 82, 81, 86, 86, 87, 83, 6, 28, 84, 28, 29, 85, 86, 85, 30, 87, 86, 31, 91, 47, 2, 95, 46, 47, 45, 99, 44, 28, 6, 88, 29, 28, 89, 30, 29, 90, 90, 91, 31, 88, 36, 92, 92, 93, 89, 90, 89, 94, 91, 90, 95, 92, 37, 96, 93, 92, 97, 94, 93, 98, 131, 46, 45, 39, 100, 96, 97, 96, 101, 98, 97, 102, 102, 103, 99, 7, 40, 100, 40, 41, 101, 102, 101, 42, 103, 102, 43, 107, 55, 3, 111, 54, 55, 54, 111, 53, 53, 115, 52, 40, 7, 104, 41, 40, 105, 42, 41, 106, 106, 107, 43, 104, 48, 108, 108, 109, 105, 106, 105, 110, 107, 106, 111, 108, 49, 112, 109, 108, 113, 110, 109, 114, 111, 110, 115, 51, 116, 112, 113, 112, 117, 114, 113, 118, 118, 119, 115, 4, 23, 116, 23, 22, 117, 118, 117, 21, 119, 118, 20, 123, 44, 3, 127, 45, 44, 34, 33, 134, 46, 131, 47, 52, 0, 120, 53, 52, 121, 54, 53, 122, 122, 123, 55, 120, 19, 124, 121, 120, 125, 122, 121, 126, 126, 127, 123, 124, 18, 128, 82, 83, 79, 126, 125, 130, 127, 126, 131, 16, 132, 128, 132, 133, 129, 130, 129, 134, 131, 130, 135, 1, 35, 132, 35, 34, 133, 99, 45, 46, 135, 134, 32, 139, 8, 4, 143, 9, 8, 144, 145, 141, 10, 147, 11, 48, 7, 136, 49, 48, 137, 50, 49, 138, 138, 139, 51, 136, 39, 140, 137, 136, 141, 138, 137, 142, 142, 143, 139, 140, 38, 144, 128, 129, 125, 142, 141, 146, 143, 142, 147, 36, 148, 144, 148, 149, 145, 146, 145, 150, 147, 146, 151, 6, 27, 148, 27, 26, 149, 150, 149, 25, 151, 150, 24, 147, 10, 9];

cBlock.s_afVertexDataLow =
[-0.65, -0.65, -0.5, -0.57735, -0.57735, -0.57735,
 -0.65,  0.65, -0.5, -0.57735,  0.57735, -0.57735,
  0.65, -0.65, -0.5,  0.57735, -0.57735, -0.57735,
  0.65,  0.65, -0.5,  0.57735,  0.57735, -0.57735,
 -0.65, -0.65,  0.5, -0.57735, -0.57735,  0.57735,
 -0.65,  0.65,  0.5, -0.57735,  0.57735,  0.57735,
  0.65, -0.65,  0.5,  0.57735, -0.57735,  0.57735,
  0.65,  0.65,  0.5,  0.57735,  0.57735,  0.57735,
   0.0,   0.0,  0.5,      0.0,      0.0,     1.25];   // for typed blocks
  
cBlock.s_aiIndexDataLow =
[4, 6, 8, 6, 7, 8, 7, 5, 8, 5, 4, 8, 1, 0, 5, 5, 0, 4, 0, 2, 4, 4, 2, 6, 2, 3, 6, 6, 3, 7, 3, 1, 7, 7, 1, 5, 1, 3, 0, 0, 3, 2];

cBlock.s_sVertexShader =
"attribute vec3 a_v3Position;"                                        +
"attribute vec3 a_v3Normal;"                                          +
"uniform   mat4 u_m4ModelViewProj;"                                   +
"uniform   mat4 u_m4ModelView;"                                       +
"uniform   mat3 u_m3Normal;"                                          +
"varying   vec3 v_v3Relative;"                                        +
"varying   vec3 v_v3Normal;"                                          +
"varying   vec3 v_v3NormalTrue;"                                      +
""                                                                    +
"void main()"                                                         +
"{"                                                                   +
"    v_v3Relative   = (u_m4ModelView * vec4(a_v3Position, 1.0)).xyz;" +
"    v_v3Normal     = u_m3Normal * a_v3Normal;"                       +
"    v_v3NormalTrue = a_v3Normal;"                                    +
""                                                                    +
"    gl_Position = u_m4ModelViewProj * vec4(a_v3Position, 1.0);"      +
"}";

cBlock.s_sFragmentShader =
"precision mediump float;"                                                                                  +
"precision lowp    int;"                                                                                    +
""                                                                                                          +
"uniform vec4 u_v4Color;"                                                                                   +
"uniform int  u_iType;"                                                                                     +
"varying vec3 v_v3Relative;"                                                                                +
"varying vec3 v_v3Normal;"                                                                                  +
"varying vec3 v_v3NormalTrue;"                                                                              +
""                                                                                                          +
"void main()"                                                                                               +
"{"                                                                                                         +
"    const vec3 v3Camera = vec3(0.0, 0.447213650, -0.894427299);"                                           +
"    const vec3 v3Light  = vec3(0.0,         0.0,          1.0);"                                           +
""                                                                                                          +
"    float fIntensity = 40.0 * inversesqrt(dot(v_v3Relative, v_v3Relative));"                               +
"    fIntensity      *= dot(normalize(v_v3Relative), v3Camera);"                                            +
"    fIntensity       = (fIntensity + 0.25)*1.1;"                                                           +
""                                                                                                          +
"    fIntensity *= dot(normalize(v_v3Normal), v3Light)*0.5+0.5;"                                            +
"    fIntensity  = min(fIntensity, 1.8);"                                                                   +
""                                                                                                          +
"    if(u_iType != 0)"                                                                                      + // still faster than a texture
"    {"                                                                                                     +
"        if(u_iType == 1) {if(v_v3NormalTrue.z > 0.99)                                 fIntensity *= 0.2;}" +
"                    else {if(v_v3NormalTrue.z > 0.92 && abs(v_v3NormalTrue.y) < 0.05) fIntensity *= 0.2;}" +
"    }"                                                                                                     +
""                                                                                                          +
"    gl_FragColor = vec4(u_v4Color.rgb*fIntensity, u_v4Color.a);"                                           +
"}";

var C_BLOCK_SIZE     = 1.3;
var C_BLOCK_DIST     = 3.0;
var C_BLOCK_BALL_OFF = C_BLOCK_SIZE+C_BALL_SIZE;


// ****************************************************************
cBlock.s_pModel  = null;
cBlock.s_pShader = null;

// own uniform location
cBlock.s_iUniformType = -1;

// saved uniform values
cBlock.s_mSaveNormal = mat3.create();
cBlock.s_vSaveColor  = vec4.create();
cBlock.s_iSaveType   = 0;


// ****************************************************************
cBlock.Init = function(bHigh)
{
    // define model
    if(cBlock.s_pModel !== null) cBlock.s_pModel.Clear();
    if(bHigh) cBlock.s_pModel  = new cModel(cBlock.s_afVertexData,    cBlock.s_aiIndexData);
         else cBlock.s_pModel  = new cModel(cBlock.s_afVertexDataLow, cBlock.s_aiIndexDataLow);

    // define shader-program
    if(cBlock.s_pShader === null)
    {
        cBlock.s_pShader = new cShader(cBlock.s_sVertexShader, cBlock.s_sFragmentShader);
        cBlock.s_iUniformType = GL.getUniformLocation(cBlock.s_pShader.m_iProgram, "u_iType");
    }

    // force update
    cBlock.s_mSaveNormal[8] = -1.0;
    cBlock.s_vSaveColor[3]  = -1.0;
};


// ****************************************************************
cBlock.Exit = function()
{
    // clear model and shader-program
    cBlock.s_pModel.Clear();
    cBlock.s_pShader.Clear();
};


// ****************************************************************
function cBlock()
{
    // create attributes
    this.m_vPosition  = vec3.create();
    this.m_mTransform = mat4.create();
    this.m_mNormal    = mat3.create();

    this.m_vColor     = vec4.create();
    this.m_iType      = 0;

    this.m_vFlyDir    = vec3.create();
    this.m_vFlyAxis   = vec3.create();
    this.m_fFlyTime   = 0.0;

    this.m_bActive    = false;
    this.m_bFlying    = true;
    this.m_fHealth    = 0.0;
}


// ****************************************************************
cBlock.prototype.Render = function()
{
    if(!this.m_bActive) return;

    // enable the shader-program
    cBlock.s_pShader.Enable();

    // update model-view matrices
    mat4.mul(g_mMatrix, g_mCamera, this.m_mTransform);
    GL.uniformMatrix4fv(cBlock.s_pShader.m_iUniformModelView,     false, g_mMatrix);
    mat4.mul(g_mMatrix, g_mProjection, g_mMatrix);
    GL.uniformMatrix4fv(cBlock.s_pShader.m_iUniformModelViewProj, false, g_mMatrix);
    
    // check and update current values (check to reduce video brandwidth)
    if(!CompareArray(cBlock.s_mSaveNormal, this.m_mNormal, 9)) {mat3.copy(cBlock.s_mSaveNormal, this.m_mNormal); GL.uniformMatrix3fv(cBlock.s_pShader.m_iUniformNormal, false, this.m_mNormal);}
    if(!CompareArray(cBlock.s_vSaveColor,  this.m_vColor,  4)) {vec4.copy(cBlock.s_vSaveColor,  this.m_vColor);  GL.uniform4f(cBlock.s_pShader.m_iUniformColor,                this.m_vColor[0], this.m_vColor[1], this.m_vColor[2], this.m_vColor[3]);}
    if(cBlock.s_iSaveType !== this.m_iType)                    {cBlock.s_iSaveType = this.m_iType;               GL.uniform1i(cBlock.s_iUniformType,                           this.m_iType);}
    
    // render the model (# performance hotspot)
    cBlock.s_pModel.Render();
};


// ****************************************************************
cBlock.prototype.Move = function()
{
    if(!this.m_bActive) return;

    if(this.m_bFlying)
    {
        // fly through the air
        this.m_vPosition[0] += this.m_vFlyDir[0]*g_fBlockTime;
        this.m_vPosition[1] += this.m_vFlyDir[1]*g_fBlockTime;
        this.m_vPosition[2] += this.m_vFlyDir[2]*g_fBlockTime;

        // reduce fly-speed and fly-angle
        var fFactor = 1.0-g_fBlockTime*0.2;
        this.m_vFlyDir[0] *= fFactor;
        this.m_vFlyDir[1] *= fFactor;
        this.m_vFlyDir[2] -= 50.0*g_fBlockTime;

        // increae current fly-time for rotation
        this.m_fFlyTime += g_fBlockTime*5.0;

        // fade out the object
        if(this.m_vPosition[2] < 0.0) this.m_vColor[3] = 1.0 + this.m_vPosition[2]*0.01;
        if(this.m_vColor[3] <= 0.0) this.m_bActive = false;

        // update transformation matrix
        this.UpdateTransform();

        // add rotation
        mat4.identity(g_mMatrix);
        mat4.rotate(g_mMatrix, g_mMatrix, this.m_fFlyTime, this.m_vFlyAxis);
        mat4.mul(this.m_mTransform, this.m_mTransform, g_mMatrix);

        // set normal matrix (only rotation inverted and transposed)
        mat3.fromMat4(this.m_mNormal, g_mMatrix);
        mat3.invert(this.m_mNormal, this.m_mNormal);
        mat3.transpose(this.m_mNormal, this.m_mNormal);
    }
    else if(this.m_vPosition[2] > 1.0)
    {
        // glide down
        this.m_vPosition[2] = Math.max(this.m_vPosition[2] - Math.min((this.m_vPosition[2]-0.8)*4.0, 130.0)*g_fBlockTime, 1.0);

        // update transformation matrix
        this.UpdateTransform();
    }
};


// ****************************************************************
cBlock.prototype.UpdateTransform = function()
{
    // update transformation matrix
    mat4.identity(this.m_mTransform);
    mat4.scale(this.m_mTransform, this.m_mTransform, [2.1, 2.1, 2.0]);
    mat4.translate(this.m_mTransform, this.m_mTransform, this.m_vPosition);
};

cBlock.prototype.UpdateTransformRotated = function(fAngle)
{
    // update transformation matrix
    mat4.identity(this.m_mTransform);
    mat4.rotateZ(this.m_mTransform, this.m_mTransform, fAngle);
    mat4.scale(this.m_mTransform, this.m_mTransform, [2.1, 2.1, 2.0]);
    mat4.translate(this.m_mTransform, this.m_mTransform, this.m_vPosition);
};


// ****************************************************************
cBlock.prototype.Activate = function()
{
    this.m_vColor[3] = 1.0;
    this.m_bActive   = true;
    this.m_bFlying   = false;
};


// ****************************************************************
cBlock.prototype.Reset = function()
{
    vec3.set(this.m_vPosition, 0.0, 0.0, 1.0);
    mat3.identity(this.m_mNormal);

    vec3.set(this.m_vFlyDir,  0.0, 0.0, 0.0);
    vec3.set(this.m_vFlyAxis, 0.0, 0.0, 0.0);
    this.m_fFlyTime = 0.0;
};


// ****************************************************************
cBlock.prototype.Throw = function(vDirection, fHeight)
{
    // set block flying
    this.m_bFlying = true;

    // kick block away
    this.m_vFlyDir[0] = vDirection[0]*70.0;
    this.m_vFlyDir[1] = vDirection[1]*70.0;
    this.m_vFlyDir[2] = fHeight;

    // spin block randomly
    vec3.random(this.m_vFlyAxis);
};


// ****************************************************************
cBlock.prototype.IsHit = function()
{
    return this.m_bFlying && this.m_bActive;
};


// ****************************************************************
cBlock.IsHitAny = function(iFrom, iTo)
{
    for(var i = iFrom; i < iTo; ++i)
    {
        if(g_pBlock[i].IsHit())
            return true;
    }
    return false;
};