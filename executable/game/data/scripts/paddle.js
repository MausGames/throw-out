/////////////////////////////////////////////////////
//*-----------------------------------------------*//
//| Part of Throw Out (http://www.maus-games.at)  |//
//*-----------------------------------------------*//
//| Released under the zlib License               |//
//| More information available in the readme file |//
//*-----------------------------------------------*//
/////////////////////////////////////////////////////
"use strict";


// ****************************************************************
cPaddle.s_afVertexData =
[-2.948144, -0.450411, -0.818929, -0.167913, -0.794031, -0.584185, 
-2.948144, 0.450411, -0.818929,   -0.167913, 0.794031, -0.584185, 
2.948144, 0.450411, -0.818929,    0.167913, 0.794031, -0.584185, 
2.948145, -0.450411, -0.818929,   0.167913, -0.794031, -0.584185, 
-2.948145, -0.450411, 0.818929,   -0.167913, -0.794031, 0.584185, 
-2.948144, 0.450411, 0.818929,    -0.167913, 0.794031, 0.584185, 
2.948144, 0.450411, 0.818929,     0.167913, 0.794031, 0.584185, 
2.948144, -0.450411, 0.818929,    0.167913, -0.794031, 0.584185, 
-3.069385, -0.344682, 0.852607,   -0.335154, -0.377300, 0.863277, 
-3.105225, -0.180346, 0.862562,   -0.340861, -0.075320, 0.937071, 
-3.110254, 0.000000, 0.863959,    -0.333964, 0.000000, 0.942564, 
-3.105225, 0.180346, 0.862562,    -0.340861, 0.075320, 0.937071, 
-3.069385, 0.344683, 0.852607,    -0.335154, 0.377300, 0.863277, 
-3.069385, 0.468934, 0.626695,    -0.220191, 0.964293, 0.146947, 
-3.105224, 0.474409, 0.327901,    -0.200659, 0.979339, 0.024537, 
-3.110253, 0.475178, -0.000000,   -0.196844, 0.980407, 0.000000, 
-3.105224, 0.474409, -0.327901,   -0.200659, 0.979339, -0.024537, 
-3.069385, 0.468934, -0.626695,   -0.220191, 0.964293, -0.146947, 
-3.069385, 0.344682, -0.852607,   -0.335154, 0.377300, -0.863277, 
-3.105224, 0.180346, -0.862562,   -0.340861, 0.075320, -0.937071, 
-3.110253, -0.000000, -0.863959,  -0.333964, 0.000000, -0.942564, 
-3.105224, -0.180346, -0.862562,  -0.340861, -0.075320, -0.937071, 
-3.069385, -0.344682, -0.852607,  -0.335154, -0.377300, -0.863277, 
-3.069385, -0.468934, -0.626695,  -0.220191, -0.964293, -0.146947, 
-3.105225, -0.474409, -0.327901,  -0.200659, -0.979339, -0.024537, 
-3.110254, -0.475178, -0.000000,  -0.196844, -0.980407, 0.000000, 
-3.105225, -0.474409, 0.327901,   -0.200659, -0.979339, 0.024537, 
-3.069385, -0.468934, 0.626695,   -0.220191, -0.964293, 0.146947, 
-2.256103, 0.468934, 0.852607,    -0.030488, 0.837062, 0.546190, 
-1.180444, 0.474409, 0.862562,    -0.005493, 0.844691, 0.535173, 
0.000000, 0.475178, 0.863959,     0.000000, 0.845698, 0.533616, 
1.180444, 0.474409, 0.862562,     0.005493, 0.844691, 0.535173, 
2.256104, 0.468934, 0.852607,     0.030488, 0.837062, 0.546190, 
3.069385, 0.468934, 0.626695,     0.220191, 0.964293, 0.146947, 
3.105225, 0.474409, 0.327901,     0.200659, 0.979339, 0.024537, 
3.110254, 0.475178, -0.000000,    0.196844, 0.980407, 0.000000, 
3.105225, 0.474409, -0.327901,    0.200659, 0.979339, -0.024537, 
3.069385, 0.468934, -0.626695,    0.220191, 0.964293, -0.146947, 
2.256103, 0.468934, -0.852607,    0.030488, 0.837062, -0.546190, 
1.180444, 0.474409, -0.862562,    0.005493, 0.844691, -0.535173, 
-0.000000, 0.475178, -0.863959,   0.000000, 0.845698, -0.533616, 
-1.180444, 0.474409, -0.862562,   -0.005493, 0.844691, -0.535173, 
-2.256103, 0.468934, -0.852607,   -0.030488, 0.837062, -0.546190, 
3.069385, 0.344682, 0.852607,     0.335154, 0.377300, 0.863277, 
3.105224, 0.180346, 0.862562,     0.340861, 0.075320, 0.937071, 
3.110253, -0.000000, 0.863959,    0.333964, 0.000000, 0.942564, 
3.105224, -0.180346, 0.862562,    0.340861, -0.075320, 0.937071, 
3.069385, -0.344683, 0.852607,    0.335154, -0.377300, 0.863277, 
3.069385, -0.468934, 0.626695,    0.220191, -0.964293, 0.146947, 
3.105224, -0.474409, 0.327901,    0.200659, -0.979339, 0.024537, 
3.110253, -0.475178, -0.000000,   0.196844, -0.980407, 0.000000, 
3.105224, -0.474409, -0.327901,   0.200659, -0.979339, -0.024537, 
3.069385, -0.468934, -0.626695,   0.220191, -0.964293, -0.146947, 
3.069385, -0.344682, -0.852607,   0.335154, -0.377300, -0.863277, 
3.105225, -0.180346, -0.862562,   0.340861, -0.075320, -0.937071, 
3.110254, 0.000000, -0.863959,    0.333964, 0.000000, -0.942564, 
3.105225, 0.180346, -0.862562,    0.340861, 0.075320, -0.937071, 
3.069385, 0.344682, -0.852607,    0.335154, 0.377300, -0.863277, 
2.256103, -0.468934, 0.852607,    0.030488, -0.837062, 0.546190, 
1.180444, -0.474409, 0.862562,    0.005493, -0.844691, 0.535173, 
-0.000000, -0.475178, 0.863959,   0.000000, -0.845698, 0.533616, 
-1.180444, -0.474409, 0.862562,   -0.005493, -0.844691, 0.535173, 
-2.256104, -0.468934, 0.852607,   -0.030488, -0.837062, 0.546190, 
-2.256103, -0.468934, -0.852607,  -0.030488, -0.837062, -0.546190, 
-1.180444, -0.474409, -0.862562,  -0.005493, -0.844691, -0.535173, 
0.000000, -0.475178, -0.863959,   0.000000, -0.845698, -0.533616, 
1.180444, -0.474409, -0.862562,   0.005493, -0.844691, -0.535173, 
2.256103, -0.468934, -0.852607,   0.030488, -0.837062, -0.546190, 
-3.390088, -0.347969, 0.632670,   -0.605426, -0.653920, 0.453658, 
-3.472668, -0.349138, 0.328715,   -0.649556, -0.753990, 0.097629, 
-3.484179, -0.349285, -0.000000,  -0.638783, -0.769372, 0.000000, 
-3.472668, -0.349138, -0.328715,  -0.649556, -0.753990, -0.097629, 
-3.390088, -0.347969, -0.632670,  -0.605426, -0.653920, -0.453658, 
-3.472669, -0.180793, 0.634796,   -0.787439, -0.207801, 0.580248, 
-3.568726, -0.180933, 0.328969,   -0.947050, -0.279580, 0.157750, 
-3.581946, -0.180944, -0.000000,  -0.955870, -0.293741, 0.000000, 
-3.568725, -0.180933, -0.328969,  -0.947050, -0.279580, -0.157750, 
-3.472668, -0.180793, -0.634796,  -0.787439, -0.207801, -0.580248, 
-3.484179, 0.000000, 0.635064,    -0.794000, 0.000000, 0.607868, 
-3.581946, 0.000000, 0.328990,    -0.984954, 0.000000, 0.172796, 
-3.595312, 0.000000, -0.000000,   -1.000000, 0.000000, 0.000000, 
-3.581946, 0.000000, -0.328990,   -0.984954, 0.000000, -0.172796, 
-3.484179, -0.000000, -0.635064,  -0.794000, 0.000000, -0.607868, 
-3.472668, 0.180793, 0.634796,    -0.787439, 0.207801, 0.580248, 
-3.568725, 0.180933, 0.328969,    -0.947050, 0.279580, 0.157750, 
-3.581946, 0.180944, -0.000000,   -0.955870, 0.293741, 0.000000, 
-3.568725, 0.180933, -0.328969,   -0.947050, 0.279580, -0.157750, 
-3.472668, 0.180793, -0.634796,   -0.787439, 0.207801, -0.580248, 
-3.390088, 0.347969, 0.632670,    -0.605426, 0.653920, 0.453658, 
-3.472668, 0.349138, 0.328715,    -0.649556, 0.753990, 0.097629, 
-3.484179, 0.349285, -0.000000,   -0.638783, 0.769372, 0.000000, 
-3.472668, 0.349138, -0.328715,   -0.649556, 0.753990, -0.097629, 
-3.390088, 0.347969, -0.632670,   -0.605426, 0.653920, -0.453658, 
-2.277612, 0.517930, 0.632670,    -0.032289, 0.991241, 0.127934, 
-2.285266, 0.530547, 0.328715,    -0.039766, 0.998932, 0.022950, 
-2.286230, 0.532305, -0.000000,   -0.040986, 0.999146, 0.000000, 
-2.285266, 0.530547, -0.328715,   -0.039766, 0.998932, -0.022950, 
-2.277612, 0.517930, -0.632670,   -0.032289, 0.991241, -0.127934, 
-1.183374, 0.530547, 0.634796,    -0.005615, 0.989593, 0.143620, 
-1.184289, 0.545222, 0.328969,    -0.007141, 0.999603, 0.026765, 
-1.184363, 0.547242, -0.000000,   -0.007630, 0.999969, 0.000000, 
-1.184289, 0.545222, -0.328969,   -0.007141, 0.999603, -0.026765, 
-1.183374, 0.530547, -0.634796,   -0.005615, 0.989593, -0.143620, 
0.000000, 0.532305, 0.635064,     0.000000, 0.989288, 0.145878, 
0.000000, 0.547242, 0.328990,     0.000000, 0.999603, 0.027467, 
0.000000, 0.549284, -0.000000,    0.000000, 0.999969, 0.000000, 
-0.000000, 0.547242, -0.328990,   0.000000, 0.999603, -0.027467, 
-0.000000, 0.532305, -0.635064,   0.000000, 0.989288, -0.145878, 
1.183374, 0.530547, 0.634796,     0.005615, 0.989593, 0.143620, 
1.184290, 0.545222, 0.328969,     0.007141, 0.999603, 0.026765, 
1.184363, 0.547242, -0.000000,    0.007630, 0.999969, 0.000000, 
1.184289, 0.545222, -0.328969,    0.007141, 0.999603, -0.026765, 
1.183374, 0.530547, -0.634796,    0.005615, 0.989593, -0.143620, 
2.277612, 0.517930, 0.632670,     0.032289, 0.991241, 0.127934, 
2.285266, 0.530547, 0.328715,     0.039766, 0.998932, 0.022950, 
2.286231, 0.532305, -0.000000,    0.040986, 0.999146, 0.000000, 
2.285266, 0.530547, -0.328715,    0.039766, 0.998932, -0.022950, 
2.277612, 0.517930, -0.632670,    0.032289, 0.991241, -0.127934, 
3.390088, 0.347969, 0.632670,     0.605426, 0.653920, 0.453658, 
3.472668, 0.349138, 0.328715,     0.649556, 0.753990, 0.097629, 
3.484179, 0.349285, -0.000000,    0.638783, 0.769372, 0.000000, 
3.472668, 0.349138, -0.328715,    0.649556, 0.753990, -0.097629, 
3.390088, 0.347969, -0.632670,    0.605426, 0.653920, -0.453658, 
3.472668, 0.180793, 0.634796,     0.787439, 0.207801, 0.580248, 
3.568725, 0.180933, 0.328969,     0.947050, 0.279580, 0.157750, 
3.581946, 0.180944, -0.000000,    0.955870, 0.293741, 0.000000, 
3.568726, 0.180933, -0.328969,    0.947050, 0.279580, -0.157750, 
3.472669, 0.180793, -0.634796,    0.787439, 0.207801, -0.580248, 
3.484179, -0.000000, 0.635064,    0.794000, 0.000000, 0.607868, 
3.581946, -0.000000, 0.328990,    0.984954, 0.000000, 0.172796, 
3.595312, -0.000000, -0.000000,   1.000000, 0.000000, 0.000000, 
3.581946, 0.000000, -0.328990,    0.984954, 0.000000, -0.172796, 
3.484179, 0.000000, -0.635064,    0.794000, 0.000000, -0.607868, 
3.472668, -0.180793, 0.634796,    0.787439, -0.207801, 0.580248, 
3.568725, -0.180933, 0.328969,    0.947050, -0.279580, 0.157750, 
3.581946, -0.180944, -0.000000,   0.955870, -0.293741, 0.000000, 
3.568725, -0.180933, -0.328969,   0.947050, -0.279580, -0.157750, 
3.472668, -0.180793, -0.634796,   0.787439, -0.207801, -0.580248, 
3.390088, -0.347969, 0.632670,    0.605426, -0.653920, 0.453658, 
3.472668, -0.349138, 0.328715,    0.649556, -0.753990, 0.097629, 
3.484179, -0.349285, -0.000000,   0.638783, -0.769372, 0.000000, 
3.472668, -0.349138, -0.328715,   0.649556, -0.753990, -0.097629, 
3.390088, -0.347969, -0.632670,   0.605426, -0.653920, -0.453658, 
2.277612, -0.517930, 0.632670,    0.032289, -0.991241, 0.127934, 
2.285266, -0.530547, 0.328715,    0.039766, -0.998932, 0.022950, 
2.286230, -0.532305, -0.000000,   0.040986, -0.999146, 0.000000, 
2.285266, -0.530547, -0.328715,   0.039766, -0.998932, -0.022950, 
2.277612, -0.517930, -0.632670,   0.032289, -0.991241, -0.127934, 
1.183374, -0.530547, 0.634796,    0.005615, -0.989593, 0.143620, 
1.184289, -0.545222, 0.328969,    0.007141, -0.999603, 0.026765, 
1.184363, -0.547242, -0.000000,   0.007630, -0.999969, 0.000000, 
1.184289, -0.545222, -0.328969,   0.007141, -0.999603, -0.026765, 
1.183374, -0.530547, -0.634796,   0.005615, -0.989593, -0.143620, 
-0.000000, -0.532305, 0.635064,   0.000000, -0.989288, 0.145878, 
-0.000000, -0.547242, 0.328990,   0.000000, -0.999603, 0.027467, 
-0.000000, -0.549284, -0.000000,  0.000000, -0.999969, 0.000000, 
0.000000, -0.547242, -0.328990,   0.000000, -0.999603, -0.027467, 
0.000000, -0.532305, -0.635064,   0.000000, -0.989288, -0.145878, 
-1.183374, -0.530547, 0.634796,   -0.005615, -0.989593, 0.143620, 
-1.184290, -0.545222, 0.328969,   -0.007141, -0.999603, 0.026765, 
-1.184363, -0.547242, -0.000000,  -0.007630, -0.999969, 0.000000, 
-1.184289, -0.545222, -0.328969,  -0.007141, -0.999603, -0.026765, 
-1.183374, -0.530547, -0.634796,  -0.005615, -0.989593, -0.143620, 
-2.277612, -0.517930, 0.632670,   -0.032289, -0.991241, 0.127934, 
-2.285266, -0.530547, 0.328715,   -0.039766, -0.998932, 0.022950, 
-2.286231, -0.532305, -0.000000,  -0.040986, -0.999146, 0.000000, 
-2.285266, -0.530547, -0.328715,  -0.039766, -0.998932, -0.022950, 
-2.277612, -0.517930, -0.632670,  -0.032289, -0.991241, -0.127934, 
-2.277612, -0.347969, -0.941691,  -0.055086, -0.372356, -0.926420, 
-1.183374, -0.349138, -0.964630,  -0.009491, -0.406842, -0.913419, 
0.000000, -0.349285, -0.967828,   0.000000, -0.411695, -0.911283, 
1.183374, -0.349138, -0.964630,   0.009491, -0.406842, -0.913419, 
2.277612, -0.347969, -0.941691,   0.055086, -0.372356, -0.926420, 
-2.285266, -0.180793, -0.964630,  -0.071780, -0.076601, -0.994446, 
-1.184289, -0.180933, -0.991313,  -0.012909, -0.088168, -0.996002, 
0.000000, -0.180944, -0.994985,   0.000000, -0.090060, -0.995911, 
1.184290, -0.180933, -0.991313,   0.012909, -0.088168, -0.996002, 
2.285266, -0.180793, -0.964630,   0.071780, -0.076601, -0.994446, 
-2.286230, -0.000000, -0.967828,  -0.074221, 0.000000, -0.997223, 
-1.184363, -0.000000, -0.994985,  -0.013855, 0.000000, -0.999878, 
0.000000, -0.000000, -0.998698,   0.000000, 0.000000, -1.000000, 
1.184363, 0.000000, -0.994985,    0.013855, 0.000000, -0.999878, 
2.286230, 0.000000, -0.967828,    0.074221, 0.000000, -0.997223, 
-2.285266, 0.180793, -0.964630,   -0.071780, 0.076601, -0.994446, 
-1.184289, 0.180933, -0.991313,   -0.012909, 0.088168, -0.996002, 
0.000000, 0.180944, -0.994985,    0.000000, 0.090060, -0.995911, 
1.184290, 0.180933, -0.991313,    0.012909, 0.088168, -0.996002, 
2.285266, 0.180793, -0.964630,    0.071780, 0.076601, -0.994446, 
-2.277612, 0.347969, -0.941691,   -0.055086, 0.372356, -0.926420, 
-1.183374, 0.349138, -0.964630,   -0.009491, 0.406842, -0.913419, 
0.000000, 0.349285, -0.967828,    0.000000, 0.411695, -0.911283, 
1.183374, 0.349138, -0.964630,    0.009491, 0.406842, -0.913419, 
2.277612, 0.347969, -0.941691,    0.055086, 0.372356, -0.926420, 
2.277612, -0.347969, 0.941691,    0.055086, -0.372356, 0.926420, 
1.183374, -0.349138, 0.964630,    0.009491, -0.406842, 0.913419, 
-0.000000, -0.349285, 0.967828,   0.000000, -0.411695, 0.911283, 
-1.183374, -0.349138, 0.964630,   -0.009491, -0.406842, 0.913419, 
-2.277612, -0.347969, 0.941691,   -0.055086, -0.372356, 0.926420, 
2.285266, -0.180793, 0.964630,    0.071780, -0.076601, 0.994446, 
1.184289, -0.180933, 0.991313,    0.012909, -0.088168, 0.996002, 
-0.000000, -0.180944, 0.994985,   0.000000, -0.090060, 0.995911, 
-1.184290, -0.180933, 0.991313,   -0.012909, -0.088168, 0.996002, 
-2.285266, -0.180793, 0.964630,   -0.071780, -0.076601, 0.994446, 
2.286230, -0.000000, 0.967828,    0.074221, 0.000000, 0.997223, 
1.184363, -0.000000, 0.994985,    0.013855, 0.000000, 0.999878, 
-0.000000, -0.000000, 0.998698,   0.000000, 0.000000, 1.000000, 
-1.184363, 0.000000, 0.994985,    -0.013855, 0.000000, 0.999878, 
-2.286230, 0.000000, 0.967828,    -0.074221, 0.000000, 0.997223, 
2.285266, 0.180793, 0.964630,     0.071780, 0.076601, 0.994446, 
1.184289, 0.180933, 0.991313,     0.012909, 0.088168, 0.996002, 
-0.000000, 0.180944, 0.994985,    0.000000, 0.090060, 0.995911, 
-1.184290, 0.180933, 0.991313,    -0.012909, 0.088168, 0.996002, 
-2.285266, 0.180793, 0.964630,    -0.071780, 0.076601, 0.994446, 
2.277612, 0.347969, 0.941691,     0.055086, 0.372356, 0.926420, 
1.183374, 0.349138, 0.964630,     0.009491, 0.406842, 0.913419, 
-0.000000, 0.349285, 0.967828,    0.000000, 0.411695, 0.911283, 
-1.183374, 0.349138, 0.964630,    -0.009491, 0.406842, 0.913419, 
-2.277612, 0.347969, 0.941691,    -0.055086, 0.372356, 0.926420];

cPaddle.s_aiIndexData =
[92, 17, 1, 117, 37, 2, 142, 52, 3, 23, 0, 167, 192, 38, 2, 217, 28, 5, 72, 0, 23, 72, 77, 22, 77, 82, 21, 82, 87, 19, 87, 92, 18, 4, 8, 68, 27, 68, 69, 26, 69, 70, 25, 70, 24, 24, 71, 23, 8, 9, 73, 68, 73, 74, 69, 74, 70, 70, 75, 76, 71, 76, 72, 9, 10, 78, 73, 78, 74, 74, 79, 75, 75, 80, 81, 76, 81, 82, 10, 11, 78, 78, 83, 84, 79, 84, 85, 80, 85, 81, 81, 86, 82, 11, 12, 83, 83, 88, 84, 84, 89, 90, 85, 90, 86, 86, 91, 92, 12, 5, 88, 88, 13, 89, 89, 14, 90, 90, 15, 16, 91, 16, 17, 17, 97, 1, 97, 102, 42, 102, 107, 41, 107, 112, 39, 112, 117, 38, 5, 28, 93, 13, 93, 94, 14, 94, 95, 15, 95, 16, 16, 96, 17, 28, 29, 98, 93, 98, 99, 94, 99, 95, 95, 100, 101, 96, 101, 97, 29, 30, 103, 98, 103, 99, 99, 104, 100, 100, 105, 106, 101, 106, 107, 30, 31, 103, 103, 108, 109, 104, 109, 110, 105, 110, 106, 106, 111, 107, 31, 32, 108, 108, 113, 109, 109, 114, 115, 110, 115, 111, 111, 116, 117, 32, 6, 113, 113, 33, 114, 114, 34, 115, 115, 35, 36, 116, 36, 37, 37, 122, 2, 122, 127, 57, 127, 132, 56, 132, 137, 54, 137, 142, 53, 6, 43, 118, 33, 118, 119, 34, 119, 120, 35, 120, 36, 36, 121, 37, 43, 44, 123, 118, 123, 124, 119, 124, 120, 120, 125, 126, 121, 126, 122, 44, 45, 128, 123, 128, 124, 124, 129, 125, 125, 130, 131, 126, 131, 132, 45, 46, 128, 128, 133, 134, 129, 134, 135, 130, 135, 131, 131, 136, 132, 46, 47, 133, 133, 138, 134, 134, 139, 140, 135, 140, 136, 136, 141, 142, 47, 7, 138, 138, 48, 139, 139, 49, 140, 140, 50, 51, 141, 51, 52, 52, 147, 3, 147, 152, 67, 152, 157, 66, 157, 162, 64, 162, 167, 63, 7, 58, 143, 48, 143, 144, 49, 144, 145, 50, 145, 51, 51, 146, 52, 58, 59, 148, 143, 148, 149, 144, 149, 145, 145, 150, 151, 146, 151, 147, 59, 60, 153, 148, 153, 149, 149, 154, 150, 150, 155, 156, 151, 156, 157, 60, 61, 153, 153, 158, 159, 154, 159, 160, 155, 160, 156, 156, 161, 157, 61, 62, 158, 158, 163, 159, 159, 164, 165, 160, 165, 161, 161, 166, 167, 62, 4, 163, 163, 27, 164, 164, 26, 165, 165, 25, 24, 166, 24, 23, 67, 172, 3, 172, 177, 53, 177, 182, 54, 182, 187, 56, 187, 192, 57, 0, 22, 168, 63, 168, 169, 64, 169, 170, 65, 170, 66, 66, 171, 67, 22, 21, 173, 168, 173, 174, 169, 174, 170, 170, 175, 176, 171, 176, 172, 21, 20, 178, 173, 178, 174, 174, 179, 175, 175, 180, 181, 176, 181, 182, 20, 19, 178, 178, 183, 184, 179, 184, 185, 180, 185, 181, 181, 186, 182, 19, 18, 183, 183, 188, 184, 184, 189, 190, 185, 190, 186, 186, 191, 192, 18, 1, 188, 188, 42, 189, 189, 41, 190, 190, 40, 39, 191, 39, 38, 62, 197, 4, 197, 202, 8, 202, 207, 9, 207, 212, 11, 212, 217, 12, 7, 47, 193, 58, 193, 194, 59, 194, 195, 60, 195, 61, 61, 196, 62, 47, 46, 198, 193, 198, 199, 194, 199, 195, 195, 200, 201, 196, 201, 197, 46, 45, 203, 198, 203, 199, 199, 204, 200, 200, 205, 206, 201, 206, 207, 45, 44, 203, 203, 208, 209, 204, 209, 210, 205, 210, 206, 206, 211, 207, 44, 43, 208, 208, 213, 209, 209, 214, 215, 210, 215, 211, 211, 216, 217, 43, 6, 213, 213, 32, 214, 214, 31, 215, 215, 30, 29, 216, 29, 28, 18, 92, 1, 38, 117, 2, 53, 142, 3, 167, 0, 63, 57, 192, 2, 12, 217, 5, 22, 0, 72, 77, 21, 22, 82, 20, 21, 20, 82, 19, 19, 87, 18, 27, 4, 68, 26, 27, 69, 25, 26, 70, 70, 71, 24, 71, 72, 23, 68, 8, 73, 69, 68, 74, 74, 75, 70, 71, 70, 76, 76, 77, 72, 73, 9, 78, 78, 79, 74, 79, 80, 75, 76, 75, 81, 77, 76, 82, 11, 83, 78, 79, 78, 84, 80, 79, 85, 85, 86, 81, 86, 87, 82, 12, 88, 83, 88, 89, 84, 85, 84, 90, 90, 91, 86, 87, 86, 92, 5, 13, 88, 13, 14, 89, 14, 15, 90, 91, 90, 16, 92, 91, 17, 97, 42, 1, 102, 41, 42, 107, 40, 41, 40, 107, 39, 39, 112, 38, 13, 5, 93, 14, 13, 94, 15, 14, 95, 95, 96, 16, 96, 97, 17, 93, 28, 98, 94, 93, 99, 99, 100, 95, 96, 95, 101, 101, 102, 97, 98, 29, 103, 103, 104, 99, 104, 105, 100, 101, 100, 106, 102, 101, 107, 31, 108, 103, 104, 103, 109, 105, 104, 110, 110, 111, 106, 111, 112, 107, 32, 113, 108, 113, 114, 109, 110, 109, 115, 115, 116, 111, 112, 111, 117, 6, 33, 113, 33, 34, 114, 34, 35, 115, 116, 115, 36, 117, 116, 37, 122, 57, 2, 127, 56, 57, 132, 55, 56, 55, 132, 54, 54, 137, 53, 33, 6, 118, 34, 33, 119, 35, 34, 120, 120, 121, 36, 121, 122, 37, 118, 43, 123, 119, 118, 124, 124, 125, 120, 121, 120, 126, 126, 127, 122, 123, 44, 128, 128, 129, 124, 129, 130, 125, 126, 125, 131, 127, 126, 132, 46, 133, 128, 129, 128, 134, 130, 129, 135, 135, 136, 131, 136, 137, 132, 47, 138, 133, 138, 139, 134, 135, 134, 140, 140, 141, 136, 137, 136, 142, 7, 48, 138, 48, 49, 139, 49, 50, 140, 141, 140, 51, 142, 141, 52, 147, 67, 3, 152, 66, 67, 157, 65, 66, 65, 157, 64, 64, 162, 63, 48, 7, 143, 49, 48, 144, 50, 49, 145, 145, 146, 51, 146, 147, 52, 143, 58, 148, 144, 143, 149, 149, 150, 145, 146, 145, 151, 151, 152, 147, 148, 59, 153, 153, 154, 149, 154, 155, 150, 151, 150, 156, 152, 151, 157, 61, 158, 153, 154, 153, 159, 155, 154, 160, 160, 161, 156, 161, 162, 157, 62, 163, 158, 163, 164, 159, 160, 159, 165, 165, 166, 161, 162, 161, 167, 4, 27, 163, 27, 26, 164, 26, 25, 165, 166, 165, 24, 167, 166, 23, 172, 53, 3, 177, 54, 53, 182, 55, 54, 55, 182, 56, 56, 187, 57, 63, 0, 168, 64, 63, 169, 65, 64, 170, 170, 171, 66, 171, 172, 67, 168, 22, 173, 169, 168, 174, 174, 175, 170, 171, 170, 176, 176, 177, 172, 173, 21, 178, 178, 179, 174, 179, 180, 175, 176, 175, 181, 177, 176, 182, 19, 183, 178, 179, 178, 184, 180, 179, 185, 185, 186, 181, 186, 187, 182, 18, 188, 183, 188, 189, 184, 185, 184, 190, 190, 191, 186, 187, 186, 192, 1, 42, 188, 42, 41, 189, 41, 40, 190, 191, 190, 39, 192, 191, 38, 197, 8, 4, 202, 9, 8, 207, 10, 9, 10, 207, 11, 11, 212, 12, 58, 7, 193, 59, 58, 194, 60, 59, 195, 195, 196, 61, 196, 197, 62, 193, 47, 198, 194, 193, 199, 199, 200, 195, 196, 195, 201, 201, 202, 197, 198, 46, 203, 203, 204, 199, 204, 205, 200, 201, 200, 206, 202, 201, 207, 44, 208, 203, 204, 203, 209, 205, 204, 210, 210, 211, 206, 211, 212, 207, 43, 213, 208, 213, 214, 209, 210, 209, 215, 215, 216, 211, 212, 211, 217, 6, 32, 213, 32, 31, 214, 31, 30, 215, 216, 215, 29, 217, 216, 28];

cPaddle.s_afVertexDataLow =
[-3.6, -0.55, -1.0, -0.57735, -0.57735, -0.57735,
 -3.6,  0.55, -1.0, -0.57735,  0.57735, -0.57735,
  3.6, -0.55, -1.0,  0.57735, -0.57735, -0.57735,
  3.6,  0.55, -1.0,  0.57735,  0.57735, -0.57735,
 -3.6, -0.55,  1.0, -0.57735, -0.57735,  0.57735,
 -3.6,  0.55,  1.0, -0.57735,  0.57735,  0.57735,
  3.6, -0.55,  1.0,  0.57735, -0.57735,  0.57735,
  3.6,  0.55,  1.0,  0.57735,  0.57735,  0.57735];

cPaddle.s_aiIndexDataLow =
[4, 6, 5, 5, 6, 7, 1, 0, 5, 5, 0, 4, 0, 2, 4, 4, 2, 6, 2, 3, 6, 6, 3, 7, 3, 1, 7, 7, 1, 5, 1, 3, 0, 0, 3, 2];

cPaddle.s_sVertexShader =
"attribute vec3  a_v3Position;"                                                  +
"attribute vec3  a_v3Normal;"                                                    +
"uniform   mat4  u_m4ModelViewProj;"                                             +
"uniform   mat4  u_m4ModelView;"                                                 +
"uniform   float u_fLength;"                                                     +
"uniform   float u_fLengthDiv;"                                                  +
"varying   vec3  v_v3Relative;"                                                  +
"varying   vec3  v_v3Normal;"                                                    +
""                                                                               +
"void main()"                                                                    +
"{"                                                                              +
"    vec3 v3Stretch = a_v3Position;"                                             +
"    v3Stretch.x    = (v3Stretch.x + u_fLength*sign(v3Stretch.x))*u_fLengthDiv;" +
""                                                                               +
"    v_v3Relative = (u_m4ModelView * vec4(v3Stretch, 1.0)).xyz;"                 +
"    v_v3Normal   = a_v3Normal;"                                                 +
""                                                                               +
"    gl_Position  = u_m4ModelViewProj * vec4(v3Stretch, 1.0);"                   +
"}";

cPaddle.s_sFragmentShader =
"precision mediump float;"                                                    +
""                                                                            +
"uniform vec3 u_v4Color;"                                                     + // only vec3, but named as vec4 for uniform-name-retrieval
"varying vec3 v_v3Relative;"                                                  +
"varying vec3 v_v3Normal;"                                                    +
""                                                                            +
"void main()"                                                                 +
"{"                                                                           +
"    const vec3 v3Camera = vec3(0.0, 0.447213650, -0.894427299);"             +
"    const vec3 v3Light  = vec3(0.0,         0.0,          1.0);"             +
""                                                                            +
"    float fIntensity = 52.0 * inversesqrt(dot(v_v3Relative, v_v3Relative));" +
"    fIntensity      *= dot(normalize(v_v3Relative), v3Camera);"              +
""                                                                            +
"    fIntensity *= dot(normalize(v_v3Normal), v3Light)*0.5+0.5;"              +
""                                                                            +
"    gl_FragColor = vec4(u_v4Color*fIntensity, 1.0);"                         +
"}";

var C_PADDLE_RANGE = 0.3;


// ****************************************************************
cPaddle.s_pModel  = null;
cPaddle.s_pShader = null;

// own uniform location
cPaddle.s_iUniformLength    = -1;
cPaddle.s_iUniformLengthDiv = -1;

// saved uniform values
cPaddle.s_vSaveColor  = vec3.create();
cPaddle.s_fSaveLength = 0.0;


// ****************************************************************
cPaddle.Init = function(bHigh)
{
    // define model
    if(cPaddle.s_pModel !== null) cPaddle.s_pModel.Clear();
    if(bHigh) cPaddle.s_pModel  = new cModel(cPaddle.s_afVertexData,    cPaddle.s_aiIndexData);
         else cPaddle.s_pModel  = new cModel(cPaddle.s_afVertexDataLow, cPaddle.s_aiIndexDataLow);

    // define shader-program
    if(cPaddle.s_pShader === null)
    {
        cPaddle.s_pShader = new cShader(cPaddle.s_sVertexShader, cPaddle.s_sFragmentShader);
        cPaddle.s_iUniformLength    = GL.getUniformLocation(cPaddle.s_pShader.m_iProgram, "u_fLength");
        cPaddle.s_iUniformLengthDiv = GL.getUniformLocation(cPaddle.s_pShader.m_iProgram, "u_fLengthDiv");
    }
};


// ****************************************************************
cPaddle.Exit = function()
{
    // clear model and shader-program
    cPaddle.s_pModel.Clear();
    cPaddle.s_pShader.Clear();
};


// ****************************************************************
function cPaddle(vDirection)
{
    // create attributes
    this.m_vPosition   = vec3.fromValues(0.0, 0.0, 1.25);
    this.m_vDirection  = vec3.fromValues(vDirection[0], vDirection[1], 0.0);
    this.m_vSize       = vec3.fromValues(0.0, 0.0, 1.2);
    this.m_mTransform  = mat4.create();

    this.m_vColor      = vec3.fromValues(1.0, 1.0, 1.0);
    this.m_fBump       = 0.0;
    this.m_bWall       = true;
    this.m_bShield     = false;
    this.m_bTeleporter = false;

    // (for cleaner bump animation)
    this.m_avAnimSize  = [vec2.create(), vec2.create()];
    this.m_avAnimColor = [vec3.fromValues(1.0, 1.0, 1.0), vec3.fromValues(1.0, 1.0, 1.0)];
}


// ****************************************************************
cPaddle.prototype.Render = function()
{
    // enable the shader-program
    cPaddle.s_pShader.Enable();

    // update model-view matrices
    mat4.mul(g_mMatrix, g_mCamera, this.m_mTransform);
    GL.uniformMatrix4fv(cPaddle.s_pShader.m_iUniformModelView,     false, g_mMatrix);
    mat4.mul(g_mMatrix, g_mProjection, g_mMatrix);
    GL.uniformMatrix4fv(cPaddle.s_pShader.m_iUniformModelViewProj, false, g_mMatrix);

    // check and update current values (check to reduce video bandwidth)
    if(!CompareArray(cPaddle.s_vSaveColor, this.m_vColor, 3)) {vec3.copy(cPaddle.s_vSaveColor, this.m_vColor); GL.uniform3f(cPaddle.s_pShader.m_iUniformColor, this.m_vColor[0], this.m_vColor[1], this.m_vColor[2]);}
    if(cPaddle.s_fSaveLength !== this.m_vSize[0]) 
    {
        cPaddle.s_fSaveLength = this.m_vSize[0];

        // required for non-linear scaling to keep those beautiful round borders
        var fLength = Math.max(this.m_vSize[0]-1.8, 0.0)*0.5;
        GL.uniform1f(cPaddle.s_iUniformLength,         3.6*fLength);
        GL.uniform1f(cPaddle.s_iUniformLengthDiv, 1.0/(1.0+fLength));
    }

    // render the model
    cPaddle.s_pModel.Render();
};


// ****************************************************************
cPaddle.prototype.Move = function()
{
    var fTime  = g_fTime*2.0;
    var fSpeed = g_fTime*30.0;
    var iX = this.m_vDirection[0] ? 0 : 1;
    var iY = this.m_vDirection[0] ? 1 : 0;

    // set paddle position
    if(this.m_bWall) this.m_vPosition[iY] *= 1.0 - fTime;
    else
    {
        // move paddle with the mouse cursor
        var fSmooth = Clamp((9.0 - this.m_vSize[0])*0.25, 0.0, 1.0);
        var fWide   = 33.5 - this.m_vSize[0] * 3.6;
        this.m_vPosition[iY] = Clamp(g_vMousePos[iY] * (iY ? 92.4 : 66.0), -fWide, fWide) * fSmooth * (iY ? -1.0 : 1.0);
    }
    this.m_vPosition[iX] = -33.0*this.m_vDirection[iX];

    // update bump-effect
    this.m_fBump = Math.max(this.m_fBump-fTime, 0.0);

    // update size
    this.m_avAnimSize[0][0] += ((this.m_bWall ? 9.2  : (this.m_bShield ? 2.2 : 1.2)) - this.m_avAnimSize[0][0]) * fTime;
    this.m_avAnimSize[0][1] += (1.25                                                 - this.m_avAnimSize[0][1]) * fTime;
    this.m_avAnimSize[1][0] += ((this.m_fBump*0.300)                                 - this.m_avAnimSize[1][0]) * fSpeed;
    this.m_avAnimSize[1][1] += ((this.m_fBump*0.375)                                 - this.m_avAnimSize[1][1]) * fSpeed;
    vec2.add(this.m_vSize, this.m_avAnimSize[0], this.m_avAnimSize[1]);

    // update color
    if(this.m_bTeleporter)  vec3.set(g_vVector, 0.888, 0.416, 1.250);
    else if(this.m_bShield) vec3.set(g_vVector, 0.871, 0.983, 0.049);
                       else vec3.set(g_vVector, 0.102, 0.702, 1.000);

    var fFactor = (this.m_bWall ? 0.7 : 1.0);
    this.m_avAnimColor[0][0] += (g_vVector[0]*fFactor - this.m_avAnimColor[0][0])*fTime;
    this.m_avAnimColor[0][1] += (g_vVector[1]*fFactor - this.m_avAnimColor[0][1])*fTime;
    this.m_avAnimColor[0][2] += (g_vVector[2]*fFactor - this.m_avAnimColor[0][2])*fTime;

    fFactor = Math.max(this.m_fBump-0.4, 0.0)*0.7;
    this.m_avAnimColor[1][0] += (g_vVector[0]*fFactor - this.m_avAnimColor[1][0])*fSpeed;
    this.m_avAnimColor[1][1] += (g_vVector[1]*fFactor - this.m_avAnimColor[1][1])*fSpeed;
    this.m_avAnimColor[1][2] += (g_vVector[2]*fFactor - this.m_avAnimColor[1][2])*fSpeed;

    vec3.add(this.m_vColor, this.m_avAnimColor[0], this.m_avAnimColor[1]);

    // update transformation matrix
    mat4.identity(this.m_mTransform);
    mat4.rotateZ(this.m_mTransform, this.m_mTransform, this.m_vDirection[0] ? Math.PI*0.5 : 0.0);
    mat4.scale(this.m_mTransform, this.m_mTransform, this.m_vSize);
    mat4.translate(this.m_mTransform, this.m_mTransform, this.m_vPosition);
};